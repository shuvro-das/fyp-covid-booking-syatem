{"ast":null,"code":"import { BOOKING_REGISTRATION_DATA_REQUEST, BOOKING_REGISTRATION_DATA_FAIL, BOOKING_REGISTRATION_DATA_SUCCESS } from \"../constants/BookingConstants.js\";\nimport Axios from \"axios\";\nexport const userBooking = () => async (dispatch, getState) => {\n  dispatch({\n    type: BOOKING_REGISTRATION_DATA_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/booking\", {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_FAIL,\n      payload: message\n    });\n  }\n};\nexport const register = (name, mobilenumber, birthdate, age, phohotidproof, sideinfo, hoslocation) => async dispatch => {\n  dispatch({\n    type: BOOKING_REGISTRATION_DATA_REQUEST,\n    payload: {\n      name,\n      mobilenumber,\n      birthdate,\n      age,\n      phohotidproof,\n      sideinfo,\n      hoslocation\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name\n    });\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_SUCCESS,\n      payload: data\n    }); //   dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/shuvstack/FYP 7th sem/client/src/actions/BookingAction.js"],"names":["BOOKING_REGISTRATION_DATA_REQUEST","BOOKING_REGISTRATION_DATA_FAIL","BOOKING_REGISTRATION_DATA_SUCCESS","Axios","userBooking","dispatch","getState","type","userSignin","userInfo","data","post","headers","Authorization","token","payload","error","message","response","register","name","mobilenumber","birthdate","age","phohotidproof","sideinfo","hoslocation"],"mappings":"AAAA,SACEA,iCADF,EAEEC,8BAFF,EAGEC,iCAHF,QAIO,kCAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7DD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;AACA,QAAM;AACJQ,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFH,QAAQ,EAFZ;;AAIA,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,IAAN,CACrB,cADqB,EAErB,EAFqB,EAGrB;AACEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASJ,QAAQ,CAACK,KAAM;AAA1C;AADX,KAHqB,CAAvB;AAOAT,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEL,iCADC;AAEPa,MAAAA,OAAO,EAAEL;AAFF,KAAD,CAAR;AAID,GAZD,CAYE,OAAOM,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAZ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEN,8BAAR;AAAwCc,MAAAA,OAAO,EAAEE;AAAjD,KAAD,CAAR;AACD;AACF,CAzBM;AA2BP,OAAO,MAAME,QAAQ,GACnB,CAACC,IAAD,EAAOC,YAAP,EAAqBC,SAArB,EAAgCC,GAAhC,EAAqCC,aAArC,EAAoDC,QAApD,EAA8DC,WAA9D,KACA,MAAOrB,QAAP,IAAoB;AAClBA,EAAAA,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEP,iCADC;AAEPe,IAAAA,OAAO,EAAE;AACPK,MAAAA,IADO;AAEPC,MAAAA,YAFO;AAGPC,MAAAA,SAHO;AAIPC,MAAAA,GAJO;AAKPC,MAAAA,aALO;AAMPC,MAAAA,QANO;AAOPC,MAAAA;AAPO;AAFF,GAAD,CAAR;;AAYA,MAAI;AACF,UAAM;AAAEhB,MAAAA;AAAF,QAAW,MAAMP,KAAK,CAACQ,IAAN,CAAW,qBAAX,EAAkC;AACvDS,MAAAA;AADuD,KAAlC,CAAvB;AAGAf,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEL,iCAAR;AAA2Ca,MAAAA,OAAO,EAAEL;AAApD,KAAD,CAAR,CAJE,CAKF;AACD,GAND,CAME,OAAOM,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEN,8BADC;AAEPc,MAAAA,OAAO,EACLC,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeR,IAAf,CAAoBO,OADxB,GAEID,KAAK,CAACC;AALL,KAAD,CAAR;AAOD;AACF,CA9BI","sourcesContent":["import {\n  BOOKING_REGISTRATION_DATA_REQUEST,\n  BOOKING_REGISTRATION_DATA_FAIL,\n  BOOKING_REGISTRATION_DATA_SUCCESS,\n} from \"../constants/BookingConstants.js\";\nimport Axios from \"axios\";\n\nexport const userBooking = () => async (dispatch, getState) => {\n  dispatch({ type: BOOKING_REGISTRATION_DATA_REQUEST });\n  const {\n    userSignin: { userInfo },\n  } = getState();\n\n  try {\n    const { data } = await Axios.post(\n      \"/api/booking\",\n      {},\n      {\n        headers: { Authorization: `Bearer ${userInfo.token}` },\n      }\n    );\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    const message =\n      error.response && error.response.data.message\n        ? error.response.data.message\n        : error.message;\n    dispatch({ type: BOOKING_REGISTRATION_DATA_FAIL, payload: message });\n  }\n};\n\nexport const register =\n  (name, mobilenumber, birthdate, age, phohotidproof, sideinfo, hoslocation) =>\n  async (dispatch) => {\n    dispatch({\n      type: BOOKING_REGISTRATION_DATA_REQUEST,\n      payload: {\n        name,\n        mobilenumber,\n        birthdate,\n        age,\n        phohotidproof,\n        sideinfo,\n        hoslocation,\n      },\n    });\n    try {\n      const { data } = await Axios.post(\"/api/users/register\", {\n        name,\n      });\n      dispatch({ type: BOOKING_REGISTRATION_DATA_SUCCESS, payload: data });\n      //   dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({\n        type: BOOKING_REGISTRATION_DATA_FAIL,\n        payload:\n          error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message,\n      });\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}